export async function onRequestPost({ request }) {
  try {
    console.log("üì• ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠ OCR");

    const body = await request.json();
    const imageUrl = body.url;
    console.log("üîó URL ‡∏†‡∏≤‡∏û:", imageUrl);

    if (!imageUrl) {
      console.log("‚õî ‡πÑ‡∏°‡πà‡∏°‡∏µ URL ‡πÉ‡∏ô request");
      return new Response(JSON.stringify({ error: "Missing 'url' in body" }), {
        status: 400,
        headers: { "Content-Type": "application/json" }
      });
    }

    const authHeader = request.headers.get('Authorization') || '';
    console.log("üîê Authorization header ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà:", !!authHeader);

    const res = await fetch(imageUrl, {
      headers: { Authorization: authHeader }
    });

    if (!res.ok) {
      console.log("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ:", res.status);
      return new Response(JSON.stringify({ error: `Fetch failed: ${res.status}` }), {
        status: res.status,
        headers: { "Content-Type": "application/json" }
      });
    }

    const arrayBuffer = await res.arrayBuffer();
    const uint8Array = new Uint8Array(arrayBuffer);
    console.log("üì¶ ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏Ç‡∏ô‡∏≤‡∏î (bytes):", uint8Array.length);

    console.log("‚öôÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î Tesseract ‡∏à‡∏≤‡∏Å CDN...");
    const tesseractCode = await fetch("https://unpkg.com/tesseract.js@5.0.4/dist/tesseract.min.js").then(r => r.text());
    new Function(tesseractCode)();
    console.log("‚úÖ ‡πÇ‡∏´‡∏•‡∏î Tesseract ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

    console.log("üî† ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• OCR...");
    const result = await Tesseract.recognize(uint8Array, 'tha+eng', {
      langPath: 'https://tessdata.projectnaptha.com/4.0.0_best',
      cacheMethod: 'none'
    });

    console.log("‚úÖ OCR ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô:", result.data.text?.slice(0, 100) || "(‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)");

    return new Response(JSON.stringify({ text: result.data.text }), {
      status: 200,
      headers: { "Content-Type": "application/json" }
    });

  } catch (err) {
    console.log("üî• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", err.message);
    return new Response(JSON.stringify({ error: err.message }), {
      status: 500,
      headers: { "Content-Type": "application/json" }
    });
  }
}
